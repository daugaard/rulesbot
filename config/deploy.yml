# Name of your application. Used to uniquely configure containers.
service: rulesbotai

# Name of the container image.
image: soren/rulesbotai

# Deploy to these servers.
servers:
  web:
    - jotunheim.practicalai.io
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: "ww2.rulesbot.ai,rulesbot.ai,www.rulesbot.ai"
  # Proxy connects to your container on port 80 by default.
  app_port: 5000
  healthcheck:
    path: /

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: registry.practicalai.io
  username: soren
  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  clear:
    DEBUG: "off"
    DATABASE_URL: "postgres://postgres:postgres@rulesbotai-rulesbot-postgres-prod:5432/rulesbot"
  secret:
    - DJANGO_SECRET_KEY
    - OPENAI_API_KEY
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_STORAGE_BUCKET_NAME

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"
aliases:
  console: app exec --interactive --reuse "poetry run python manage.py shell"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  db_shell: accessory exec rulesbot-postgres-prod --interactive --reuse "bash"
  db_console: accessory exec rulesbot-postgres-prod --interactive --reuse "psql -U postgres -d rulesbot"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  rulesbot-postgres-prod:
    image: postgres:15
    host: jotunheim.practicalai.io
    env:
      clear:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: rulesbot
    directories:
      - pg/data:/var/lib/postgresql/data
  db_backup:
    image: eeshugerman/postgres-backup-s3:16
    host: jotunheim.practicalai.io
    env:
      clear:
        SCHEDULE: "@daily"
        BACKUP_KEEP_DAYS: 30
        S3_REGION: us-east-1
        S3_BUCKET: prod-rulesbot-ai
        S3_PREFIX: backups
        POSTGRES_HOST: rulesbotai-rulesbot-postgres-prod
        POSTGRES_DATABASE: rulesbot
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
      secret:
        - S3_ACCESS_KEY_ID
        - S3_SECRET_ACCESS_KEY
